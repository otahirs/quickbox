
name: Build Test
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_linux:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-Qt

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: '5.15.0'
        host: 'linux'
        
    - name: Get app version
      run: | 
        echo "::set-env name=VERSION::`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`"
          
    - name: Get AppImageTool
      run: |
        curl --silent "https://api.github.com/repos/AppImage/AppImageKit/releases/latest" | jq -r '.assets[] | select(.name == "appimagetool-x86_64.AppImage").browser_download_url' | sudo xargs curl -L -o /opt/appimagetool-x86_64.AppImage --create-dirs --url
        sudo chmod +x /opt/appimagetool-x86_64.AppImage
    
    - name: Build AppImage
      run: |
        mkdir ./build
        ./quickevent/make-dist.sh --src-dir . --qt-dir ${Qt5_DIR} --work-dir ./build --appimage-tool /opt/appimagetool-x86_64.AppImage 
      # --lib-dir /usr/lib/x86_64-linux-gnu/
        
    - name: Save AppImage
      uses: actions/upload-artifact@v2
      with:
        name: quickevent-linux64-${{ env.VERSION }}.Appimage
        path: build/artifacts/quickevent-*-x86_64.AppImage
      
      
  build_windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
        
    steps:
    - uses: actions/checkout@v2
    - name: Install package
      run: C:/msys64/usr/bin/pacman -S mingw-w64-openssl mingw-w64-postgresql
      shell: cmd
        
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}\Qt
        key: ${{ runner.os }}-Qt
 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: '5.15.0'
        host: 'windows'
        arch: 'win64_mingw81' 
    
#    - name: Cache OpenSSL
#      id: cache-ssl
#      uses: actions/cache@v2
#      with:
#        path: ${{ runner.workspace }}\OpenSSL
#        key: ${{ runner.os }}-OpenSSL
        
#    - name: Get OpenSSL
#      if: steps.cache-ssl.outputs.cache-hit != 'true'
#      run: |
#        mkdir ../OpenSSL
#        curl -L -o openssl.tar.xz https://dl.bintray.com/vszakats/generic/openssl-1.1.1c-win64-mingw.tar.xz
#        tar -xvf openssl.tar.xz -C ../OpenSSL --strip-components 1
#        rm -f openssl.tar.xz
    
    - name: Build
      run: |
        qmake.exe quickbox.pro -spec win32-g++ "CONFIG+=release" "CONFIG+=qtquickcompiler" "CONFIG+=force_debug_info" 
        mingw32-make.exe qmake_all
        mingw32-make.exe -j4
      shell: cmd
              
    - name: Install language files
      run: |
        TRANS_DIR=bin/translations
        mkdir -p $TRANS_DIR
        for tsfile in `find . -name "*.ts"` ; do
          qmfile=`basename "${tsfile%.*}.qm"`
          echo "$QT_DIR/bin/lrelease $tsfile -qm $TRANS_DIR/$qmfile"
          $Qt5_Dir/bin/lrelease $tsfile -qm $TRANS_DIR/$qmfile
        done
      
    - name: Get app version
      run: echo "::set-env name=VERSION::`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`"
  
    - name: Create installer
      run: |
        choco install innosetup --no-progress
        "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "/DVERSION=%VERSION%" "/DQT_DIR=%Qt5_Dir%" "/DPSQL_DIR=%PGROOT%" "/DSSL_DIR=${{ runner.workspace }}\OpenSSL" quickevent/quickevent.iss 
      shell: cmd
    
    - name: Save setup
      uses: actions/upload-artifact@v2
      with:
        name: quickevent-win64-${{ env.VERSION }}-setup.exe
        path: _inno\quickevent\quickevent-win64-${{ env.VERSION }}-setup.exe
